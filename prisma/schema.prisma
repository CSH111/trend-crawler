// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") 
}



model KeywordGroup {
  id        Int      @id @default(autoincrement())
  name      String      @db.VarChar(20)
  refinedKeywords RefinedKeywordsOnKeywordGroups[]
  @@map("keyword_groups")
}

model RawKeyword {
  id                Int              @id @default(autoincrement())
  name              String           @db.VarChar(20)
  refinedKeyword    RefinedKeyword   @relation(fields: [refined_keyword_id], references: [id])
  refined_keyword_id  Int
  @@fulltext([name])
  @@map("raw_keywords")
}

model RefinedKeyword {
  id        Int      @id @default(autoincrement())
  name      String      @db.VarChar(20) @unique
  is_active Int       @db.TinyInt @default(1)
  keywordGroups  RefinedKeywordsOnKeywordGroups[]
  jobUrls  RefinedKeywordsOnJobUrl[]
  rawKeywords RawKeyword[]
  keywordCounts KeywordCount[]
  @@map("refined_keywords")
}
model JobUrl {
  id        Int      @id @default(autoincrement())
  url      String      @db.VarChar(50) @unique
  created_at DateTime @default(now())
  refinedKeywords RefinedKeywordsOnJobUrl[]

  @@fulltext([url])
  @@map("job_urls")
}

model Platform {
  id         Int      @id @default(autoincrement())
  name       String      @db.VarChar(20)
  last_id    String   @db.VarChar(20)
  updated_at DateTime @default(now())
  @@map("platforms")
}

model RefinedKeywordsOnJobUrl{
  id                    Int                 @id @default(autoincrement())
  refinedKeyword        RefinedKeyword      @relation(fields: [refined_keyword_id], references: [id])
  refined_keyword_id    Int
  jobUrl                JobUrl         @relation(fields: [job_url_id], references: [id])
  job_url_id            Int
  @@unique([refined_keyword_id,job_url_id])
  @@map("refined_keywords_on_job_url")
}

model KeywordCount {
  id        Int      @id @default(autoincrement())
  count     Int   @db.Int()
  created_at DateTime @default(now())
  refinedKeyword    RefinedKeyword     @relation(fields: [refined_keyword_id], references: [id])
  refined_keyword_id  Int
  @@map("keyword_counts")
}

model RefinedKeywordsOnKeywordGroups {
  id                    Int                 @id @default(autoincrement())
  refinedKeyword        RefinedKeyword      @relation(fields: [refined_keyword_id], references: [id])
  refined_keyword_id      Int
  keywordGroup          KeywordGroup         @relation(fields: [keyword_group_id], references: [id])
  keyword_group_id        Int
  @@map("refined_keywords_on_keyword_groups")
}